type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/text.txt
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class Main {
        final static private Scanner readIp = new Scanner(System.in);

        public static void main(String[] args) {
            int code = 9305;
            int[] codeArray = {9, 3, 0, 5};
            System.out.println("The secret code is prepared: ****.");

            boolean correctGuess = false;
            int turn = 0;

            while (!correctGuess) {
                turn++;
                System.out.printf("Turn %d. Answer: \n", turn);
                int guess = readIp.nextInt();
                ArrayList<Integer> guessNum = new ArrayList<>();
                do {
                    guessNum.add(guess % 10);
                    guess /= 10;
                } while (guess > 0);
                correctGuess = analyzeCode(codeArray, guessNum);
            }

            System.out.printf("Congrats! The secret code is %d.", code);
            System.out.println();
        }

        private static boolean analyzeCode(int[] codeArray, ArrayList<Integer> guessNum) {
            int cowCount = 0;
            int bullCount = 0;

            for (int g = 0; g < guessNum.size(); g++) {
                for (int c = 0; c < codeArray.length; c++) {
                    if (guessNum.get(g) == codeArray[c] && g == c) {
                        bullCount++;
                        break;
                    } else if (guessNum.get(g) == codeArray[c]) {
                        cowCount++;
                        break;
                    }
                }
            }

            constructGrade(bullCount, cowCount);
            return bullCount == 4;
        }

        private static void constructGrade(int bullCount, int cowCount) {
            StringBuilder grade = new StringBuilder("Grade: ");
            if (cowCount == 0 && bullCount == 0) {
                grade.append("None.");
            }
            if (bullCount == 1) {
                grade.append(String.format("%d bull", bullCount));
            }
            if (bullCount > 1) {
                grade.append(String.format("%d bulls", bullCount));
            }
            if (bullCount != 0 && cowCount != 0) {
                grade.append(" and ");
            }
            if (cowCount == 1) {
                grade.append(String.format("%d cow", cowCount));
            }
            if (cowCount > 1) {
                grade.append(String.format("%d cows", cowCount));
            }
            grade.append(".");

            System.out.println(grade);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5431#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 22 Jun 2022 09:39:42 UTC
record: 3
