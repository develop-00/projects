type: edu
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: |
    111122223333
  learner_created: true
- name: src/Main.java
  visible: true
  text: "import java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\
    import java.util.Scanner;\n\npublic class Main {\n    private static final int\
    \ last = 127;\n\n    public static void main(String[] args) {\n\n\n        String\
    \ operation = \"enc\";\n        String input = \"\";\n        int key = 0;\n \
    \       String outputFileName =\"\";\n        StringBuilder output = new StringBuilder();\n\
    \        \n        for (int i = 0; i < args.length; i++) {\n            switch\
    \ (args[i]) {\n                case \"-mode\" -> operation = args[++i];\n    \
    \            case \"-key\" -> key = Integer.parseInt(args[++i]);\n           \
    \     case \"-data\" -> input = args[++i];\n                case \"-in\" -> input\
    \ = readFromFile(args[++i]);\n                case \"-out\" -> outputFileName\
    \ = args[++i];\n            }\n        }\n\n        switch (operation) {\n   \
    \         case \"enc\" -> encode(input.toCharArray(), key, output);\n        \
    \    case \"dec\" -> decode(input.toCharArray(), key, output);\n        }\n\n\
    \        if (outputFileName.equals(\"\")) {\n            System.out.println(output);\n\
    \        } else {\n            writeToFile(output.toString(), outputFileName);\n\
    \        }\n    }\n\n    private static void decode(char[] input, int key, StringBuilder\
    \ output) {\n        for (char ch : input) {\n            output.append((char)(((int)\
    \ ch - key) % last));\n        }\n    }\n\n    private static void encode(char[]\
    \ input, int key, StringBuilder output) {\n        for (char ch : input) {\n \
    \           output.append((char)(((int) ch + key) % last));\n        }\n    }\n\
    \n    private static String readFromFile(String fileName) {\n\n        StringBuilder\
    \ input = new StringBuilder();\n        File file = new File(fileName);\n\n  \
    \      try (Scanner readFile = new Scanner(file)) {\n            while (readFile.hasNextLine())\
    \ {\n                input.append(readFile.nextLine());\n            }\n     \
    \   } catch (Exception e) {\n            System.out.println(\"Error: File not\
    \ found\");\n        }\n        return input.toString();\n    }\n\n    private\
    \ static void writeToFile(String output, String fileName) {\n        File file\
    \ = new File(fileName);\n\n        try (PrintWriter printWriter = new PrintWriter(file))\
    \ {\n\n            printWriter.println(output);\n        } catch (IOException\
    \ e) {\n            System.out.println(\"Error: Can't write output to file\");\n\
    \        }\n    }\n}\n\n"
  learner_created: true
- name: src/road_to_treasure.txt
  visible: true
  text: |
    Welcome to hyperskill!
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5392#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 27 Sep 2022 09:03:26 UTC
record: -1
